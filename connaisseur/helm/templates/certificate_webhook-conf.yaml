{{- $k8sMinor := (include "k8s-version-minor" .) -}}

# Validate that if 'tls' key is set, either both or none of 'cert' and 'key' are set
{{- include "validateTLSConfig" . -}}

# Set up certificate and private key to use for TLS communication:
# If there's a configured one in the values.yaml, use that to allow rotation
# Otherwise, if there's an existing installation re-use the previous certificate
# Otherwise, generate a new self-signed certificate
{{- $altNames := list -}}
{{- $altNames = append $altNames (printf "%s-svc" .Chart.Name) -}}
{{- $altNames = append $altNames (printf "%s-svc.%s" .Chart.Name .Release.Namespace) -}}
{{- $altNames = append $altNames (printf "%s-svc.%s.svc" .Chart.Name .Release.Namespace) -}}
{{- $altNames = append $altNames (printf "%s-svc.%s.svc.cluster.local" .Chart.Name .Release.Namespace) -}}
{{- $newCertificate := genSelfSignedCert (printf "%s-svc.%s.svc" .Chart.Name .Release.Namespace) nil $altNames 36500 -}}

# Default to certificate of existing installation over new self-signed certificate
{{ $encodedTLSCert := default ($newCertificate.Cert | b64enc) (include "getInstalledEncodedTLSCert" .) }}
{{ $encodedTLSKey := default ($newCertificate.Key | b64enc) (include "getInstalledEncodedTLSKey" .) }}

# If present, use the configured certificate
{{- if hasKey .Values.deployment "tls" -}}
  {{- if hasKey .Values.deployment.tls "key" -}}
    {{- $certByHelmConfig := buildCustomCert (.Values.deployment.tls.cert | b64enc) (.Values.deployment.tls.key | b64enc) -}}
    {{- $encodedTLSCert = $certByHelmConfig.Cert | b64enc -}}
    {{- $encodedTLSKey = $certByHelmConfig.Key | b64enc -}}
  {{- end -}}
{{- end -}}

# For whatever reason Helm concatenates the comments with the apiVersion field below
# unless there's a comment below the Helm commands or there's no comments at all.
# As I wanted to have comments, here's this comment commenting why this comment is here.

apiVersion: v1
kind: Secret
metadata:
  name: {{ .Chart.Name }}-tls
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "helm.labels" . | nindent 4 }}
type: Opaque
data:
  tls.crt: {{ $encodedTLSCert }}
  tls.key: {{ $encodedTLSKey }}
---
{{ if lt ($k8sMinor | int) 17 }}
apiVersion: admissionregistration.k8s.io/v1beta1
{{ else }}
apiVersion: admissionregistration.k8s.io/v1
{{ end }}
kind: MutatingWebhookConfiguration
metadata:
  name: {{ .Chart.Name }}-webhook
  labels:
    {{- include "helm.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-delete-policy": before-hook-creation, hook-succeeded, hook-failed
webhooks:
  - name: {{ .Chart.Name }}-svc.{{ .Release.Namespace }}.svc
    failurePolicy: Ignore
    reinvocationPolicy: {{ .Values.deployment.reinvocationPolicy | default "Never" }}
    clientConfig:
      service:
        name: {{ .Chart.Name }}-svc
        namespace: {{ .Release.Namespace }}
        path: /mutate
      caBundle: {{ $encodedTLSCert }}
    rules: []
    sideEffects: None
    {{- if lt ($k8sMinor | int) 17 }}
    admissionReviewVersions: ["v1beta1"]
    {{- else }}
    admissionReviewVersions: ["v1"]
    {{- end }}
---
{{ if lt ($k8sMinor | int) 17 -}}
apiVersion: admissionregistration.k8s.io/v1beta1
{{ else -}}
apiVersion: admissionregistration.k8s.io/v1
{{ end -}}
kind: MutatingWebhookConfiguration
metadata:
  name: {{ .Chart.Name }}-webhook
  labels:
    {{- include "helm.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install, post-upgrade, post-rollback
webhooks:
  - name: {{ .Chart.Name }}-svc.{{ .Release.Namespace }}.svc
    failurePolicy: {{ .Values.deployment.failurePolicy | default "Fail" }}
    reinvocationPolicy: {{ .Values.deployment.reinvocationPolicy | default "Never" }}
    clientConfig:
      service:
        name: {{ .Chart.Name }}-svc
        namespace: {{ .Release.Namespace }}
        path: /mutate
      caBundle: {{ $encodedTLSCert }}
    rules:
      - operations: ["CREATE", "UPDATE"]
        apiGroups: ["*"]
        apiVersions: ["*"]
        {{- if .Values.automaticChildApproval }}
        {{- if .Values.automaticChildApproval.enabled }}
        resources: ["pods", "deployments", "replicationcontrollers", "replicasets", "daemonsets", "statefulsets", "jobs", "cronjobs"]
        {{- else }}
        resources: ["pods"]
        {{- end }}
        {{- else }}
        resources: ["pods", "deployments", "replicationcontrollers", "replicasets", "daemonsets", "statefulsets", "jobs", "cronjobs"]
        {{- end }}
    sideEffects: None
    {{- if gt ($k8sMinor | int) 13 }}
    timeoutSeconds: 30
    {{- end }}
    {{- if lt ($k8sMinor | int) 17 }}
    admissionReviewVersions: ["v1beta1"]
    {{- else }}
    admissionReviewVersions: ["v1"]
    {{- end }}
    {{- if .Values.namespacedValidation }}
    {{- if .Values.namespacedValidation.enabled }}
    namespaceSelector:
      matchExpressions:
      - key: securesystemsengineering.connaisseur/webhook
    {{- if not .Values.namespacedValidation.mode}}
        operator: NotIn
        values:
          - ignore
    {{- else if eq .Values.namespacedValidation.mode "ignore"}}
        operator: NotIn
        values:
          - ignore
    {{- else if eq .Values.namespacedValidation.mode "validate"}}
        operator: In
        values:
          - validate
   {{- end }}
   {{- end }}
   {{- end }}
